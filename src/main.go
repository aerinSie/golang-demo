package main

import (
	"net/http"
	"os"

	"golang-demo/src/docs"    // docs is generated by Swag CLI, you have to import it.
	"golang-demo/src/handler" //golang-demo是 專案名稱

	"github.com/gin-gonic/gin"
	"github.com/spf13/viper"
	ginSwagger "github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"

	"fmt"
)

var (
	myenv string
)

// $ go run main.go -env="prd" arg1
func config() {

	if os.Args[1] != "" {
		myenv = os.Args[1]
	} else {
		myenv = "prd"
	}

	// &env是用戶命令行的-env後的參數值
	// flag.StringVar(&myenv, "myenv", "local", "環境名，默認為local")
	// flag.Parse()               //解析所有註冊的flag
	viper.SetConfigName(myenv) // 设置配置文件名 (不带后缀)
	fmt.Println("myenv==============" + myenv)
	viper.AddConfigPath("config") // 第一个搜索路径
	err := viper.ReadInConfig()   // 读取配置数据
	if err != nil {
		panic(fmt.Errorf("Fatal error config file: %s ", err))
	}

	host := viper.GetString("swagger.baseURL")
	docs.SwaggerInfo.Title = "Golang-Demo Swagger API"
	docs.SwaggerInfo.Description = "This is a sample server Golang-Demo server."
	docs.SwaggerInfo.Version = "1.0.0"
	docs.SwaggerInfo.Host = host
	docs.SwaggerInfo.BasePath = ""
	docs.SwaggerInfo.Schemes = []string{"http", "https"}
}

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email seekastyle@gmail.com
// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html
// @termsOfService http://swagger.io/terms/
func main() {
	// 初始化引擎
	config()
	engine := gin.Default()
	engine.GET("/swagger/*any", ginSwagger.DisablingWrapHandler(swaggerFiles.Handler, "NAME_OF_ENV_VARIABLE"))
	// 注册一个路由和处理函数
	engine.Any("/", WebRoot)
	engine.POST("/login", handler.PostLogin)
	user := engine.Group("user")
	user.GET("/info", handler.GetUserInfoByAccount)
	// user.GET("/:userID", userhandler.GetUserInfo)
	user.POST("/register", handler.PostRegister)
	user.PUT("/change-password", handler.PutUserChangePassword)

	// 绑定端口，然后启动应用
	engine.Run(":9205")
}

// WebRoot is ...
func WebRoot(context *gin.Context) {
	context.String(http.StatusOK, "hello, world")
}
